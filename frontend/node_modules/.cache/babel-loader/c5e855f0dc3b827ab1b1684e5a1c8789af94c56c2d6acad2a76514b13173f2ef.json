{"ast":null,"code":"var _jsxFileName = \"/Users/rxndal/NEA2/frontend/src/components/Authorisedroute.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport api from '../api';\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../constants';\n\n//function to render a component in my html to ensure that only people who are authenticated can view that site, else they are redirected\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Authorisedroute({\n  children\n}) {\n  _s();\n  const [authorised, setAuthorised] = useState(null);\n  const refreshtoken = useCallback(async () => {\n    const refreshtoken = localStorage.getItem(REFRESH_TOKEN);\n    try {\n      //res is short for response\n      const res = await api.post('/applicant/token/refresh/', {\n        refresh: refreshtoken\n      });\n      if (res.status === 200) {\n        //sets access const to the access token in the response data\n        const {\n          access\n        } = res.data;\n        localStorage.setItem(ACCESS_TOKEN, access);\n        setAuthorised(true);\n      } else {\n        setAuthorised(false);\n      }\n    } catch {\n      //a try except block to catch errors that may happen so that the whole component does not fail\n      setAuthorised(false);\n      console.log(\"Error refreshing token\");\n    }\n  }, []);\n\n  //auth function to check if an access token is in local storage\n  const auth = useCallback(async () => {\n    const token = localStorage.getItem(ACCESS_TOKEN);\n    if (!token) {\n      setAuthorised(false);\n      return;\n    }\n    const jwtdecode = jwtDecode(token);\n    const expiryoftoken = jwtdecode.exp;\n    const now = Date.now() / 1000;\n    //if the access token has expired, then it waits for the refresh token to generate a new access token\n    if (expiryoftoken < now) {\n      await refreshtoken();\n    } else {\n      setAuthorised(true);\n    }\n  }, [refreshtoken]);\n  useEffect(() => {\n    auth().catch(() => setAuthorised(false));\n  }, [auth]);\n  if (authorised === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this);\n  }\n  return authorised ? children : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Not authorised\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 36\n  }, this);\n}\n_s(Authorisedroute, \"07N4GknMr/Uvs+BapIofnTG7mWQ=\");\n_c = Authorisedroute;\nexport default Authorisedroute;\nvar _c;\n$RefreshReg$(_c, \"Authorisedroute\");","map":{"version":3,"names":["useState","useEffect","useCallback","jwtDecode","api","ACCESS_TOKEN","REFRESH_TOKEN","jsxDEV","_jsxDEV","Authorisedroute","children","_s","authorised","setAuthorised","refreshtoken","localStorage","getItem","res","post","refresh","status","access","data","setItem","console","log","auth","token","jwtdecode","expiryoftoken","exp","now","Date","catch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rxndal/NEA2/frontend/src/components/Authorisedroute.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport api from '../api'; \nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../constants'; \n\n//function to render a component in my html to ensure that only people who are authenticated can view that site, else they are redirected\nfunction Authorisedroute({children}) {\n    const [authorised, setAuthorised] = useState(null);\n\n    const refreshtoken = useCallback(async () => {\n        const refreshtoken = localStorage.getItem(REFRESH_TOKEN);\n        try {\n            //res is short for response\n            const res = await api.post('/applicant/token/refresh/', {refresh: refreshtoken});\n            if (res.status === 200) {\n                //sets access const to the access token in the response data\n                const {access} = res.data;\n                localStorage.setItem(ACCESS_TOKEN, access);\n                setAuthorised(true);\n            } else {\n                setAuthorised(false);\n            }\n        } catch {\n            //a try except block to catch errors that may happen so that the whole component does not fail\n            setAuthorised(false);\n            console.log(\"Error refreshing token\");\n        }\n    }, []);\n\n    //auth function to check if an access token is in local storage\n    const auth = useCallback(async () => {\n        const token = localStorage.getItem(ACCESS_TOKEN);\n        if (!token) {\n            setAuthorised(false);\n            return;\n        }\n        const jwtdecode = jwtDecode(token);\n        const expiryoftoken = jwtdecode.exp;\n        const now = Date.now() / 1000;\n        //if the access token has expired, then it waits for the refresh token to generate a new access token\n        if (expiryoftoken < now) {\n            await refreshtoken();\n        } else {\n            setAuthorised(true);\n        }\n    }, [refreshtoken]);\n\n    useEffect(() => {\n        auth().catch(() => setAuthorised(false));\n    }, [auth]);\n\n    if (authorised === null) {\n        return <div>Loading...</div>;\n    }\n\n    return authorised ? children : <div>Not authorised</div>;\n}\n\nexport default Authorisedroute;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,YAAY,EAAEC,aAAa,QAAQ,cAAc;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,eAAeA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMc,YAAY,GAAGZ,WAAW,CAAC,YAAY;IACzC,MAAMY,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACV,aAAa,CAAC;IACxD,IAAI;MACA;MACA,MAAMW,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,2BAA2B,EAAE;QAACC,OAAO,EAAEL;MAAY,CAAC,CAAC;MAChF,IAAIG,GAAG,CAACG,MAAM,KAAK,GAAG,EAAE;QACpB;QACA,MAAM;UAACC;QAAM,CAAC,GAAGJ,GAAG,CAACK,IAAI;QACzBP,YAAY,CAACQ,OAAO,CAAClB,YAAY,EAAEgB,MAAM,CAAC;QAC1CR,aAAa,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM;QACHA,aAAa,CAAC,KAAK,CAAC;MACxB;IACJ,CAAC,CAAC,MAAM;MACJ;MACAA,aAAa,CAAC,KAAK,CAAC;MACpBW,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,IAAI,GAAGxB,WAAW,CAAC,YAAY;IACjC,MAAMyB,KAAK,GAAGZ,YAAY,CAACC,OAAO,CAACX,YAAY,CAAC;IAChD,IAAI,CAACsB,KAAK,EAAE;MACRd,aAAa,CAAC,KAAK,CAAC;MACpB;IACJ;IACA,MAAMe,SAAS,GAAGzB,SAAS,CAACwB,KAAK,CAAC;IAClC,MAAME,aAAa,GAAGD,SAAS,CAACE,GAAG;IACnC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;IAC7B;IACA,IAAIF,aAAa,GAAGE,GAAG,EAAE;MACrB,MAAMjB,YAAY,CAAC,CAAC;IACxB,CAAC,MAAM;MACHD,aAAa,CAAC,IAAI,CAAC;IACvB;EACJ,CAAC,EAAE,CAACC,YAAY,CAAC,CAAC;EAElBb,SAAS,CAAC,MAAM;IACZyB,IAAI,CAAC,CAAC,CAACO,KAAK,CAAC,MAAMpB,aAAa,CAAC,KAAK,CAAC,CAAC;EAC5C,CAAC,EAAE,CAACa,IAAI,CAAC,CAAC;EAEV,IAAId,UAAU,KAAK,IAAI,EAAE;IACrB,oBAAOJ,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,OAAOzB,UAAU,GAAGF,QAAQ,gBAAGF,OAAA;IAAAE,QAAA,EAAK;EAAc;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC5D;AAAC1B,EAAA,CAlDQF,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AAoDxB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}